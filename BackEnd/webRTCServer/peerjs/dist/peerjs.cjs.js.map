{
  "version": 3,
  "sources": ["../node_modules/peerjs-js-binarypack/lib/bufferbuilder.js", "../node_modules/peerjs-js-binarypack/lib/binarypack.js", "../node_modules/eventemitter3/index.js", "../lib/index.ts", "../lib/utils.ts", "../lib/peer.ts", "../lib/logger.ts", "../lib/socket.ts", "../lib/negotiator.ts", "../lib/baseconnection.ts", "../lib/mediaconnection.ts", "../lib/encodingQueue.ts", "../lib/dataconnection.ts", "../lib/api.ts", "../lib/supports.ts"],
  "sourcesContent": ["var binaryFeatures = {};\r\nbinaryFeatures.useBlobBuilder = (function () {\r\n  try {\r\n    new Blob([]);\r\n    return false;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n})();\r\n\r\nbinaryFeatures.useArrayBufferView = !binaryFeatures.useBlobBuilder && (function () {\r\n  try {\r\n    return (new Blob([new Uint8Array([])])).size === 0;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n})();\r\n\r\nmodule.exports.binaryFeatures = binaryFeatures;\r\nvar BlobBuilder = module.exports.BlobBuilder;\r\nif (typeof window !== 'undefined') {\r\n  BlobBuilder = module.exports.BlobBuilder = window.WebKitBlobBuilder ||\r\n    window.MozBlobBuilder || window.MSBlobBuilder || window.BlobBuilder;\r\n}\r\n\r\nfunction BufferBuilder () {\r\n  this._pieces = [];\r\n  this._parts = [];\r\n}\r\n\r\nBufferBuilder.prototype.append = function (data) {\r\n  if (typeof data === 'number') {\r\n    this._pieces.push(data);\r\n  } else {\r\n    this.flush();\r\n    this._parts.push(data);\r\n  }\r\n};\r\n\r\nBufferBuilder.prototype.flush = function () {\r\n  if (this._pieces.length > 0) {\r\n    var buf = new Uint8Array(this._pieces);\r\n    if (!binaryFeatures.useArrayBufferView) {\r\n      buf = buf.buffer;\r\n    }\r\n    this._parts.push(buf);\r\n    this._pieces = [];\r\n  }\r\n};\r\n\r\nBufferBuilder.prototype.getBuffer = function () {\r\n  this.flush();\r\n  if (binaryFeatures.useBlobBuilder) {\r\n    var builder = new BlobBuilder();\r\n    for (var i = 0, ii = this._parts.length; i < ii; i++) {\r\n      builder.append(this._parts[i]);\r\n    }\r\n    return builder.getBlob();\r\n  } else {\r\n    return new Blob(this._parts);\r\n  }\r\n};\r\n\r\nmodule.exports.BufferBuilder = BufferBuilder;\r\n", "var BufferBuilder = require('./bufferbuilder').BufferBuilder;\r\nvar binaryFeatures = require('./bufferbuilder').binaryFeatures;\r\n\r\nvar BinaryPack = {\r\n  unpack: function (data) {\r\n    var unpacker = new Unpacker(data);\r\n    return unpacker.unpack();\r\n  },\r\n  pack: function (data) {\r\n    var packer = new Packer();\r\n    packer.pack(data);\r\n    var buffer = packer.getBuffer();\r\n    return buffer;\r\n  }\r\n};\r\n\r\nmodule.exports = BinaryPack;\r\n\r\nfunction Unpacker (data) {\r\n  // Data is ArrayBuffer\r\n  this.index = 0;\r\n  this.dataBuffer = data;\r\n  this.dataView = new Uint8Array(this.dataBuffer);\r\n  this.length = this.dataBuffer.byteLength;\r\n}\r\n\r\nUnpacker.prototype.unpack = function () {\r\n  var type = this.unpack_uint8();\r\n  if (type < 0x80) {\r\n    return type;\r\n  } else if ((type ^ 0xe0) < 0x20) {\r\n    return (type ^ 0xe0) - 0x20;\r\n  }\r\n\r\n  var size;\r\n  if ((size = type ^ 0xa0) <= 0x0f) {\r\n    return this.unpack_raw(size);\r\n  } else if ((size = type ^ 0xb0) <= 0x0f) {\r\n    return this.unpack_string(size);\r\n  } else if ((size = type ^ 0x90) <= 0x0f) {\r\n    return this.unpack_array(size);\r\n  } else if ((size = type ^ 0x80) <= 0x0f) {\r\n    return this.unpack_map(size);\r\n  }\r\n\r\n  switch (type) {\r\n    case 0xc0:\r\n      return null;\r\n    case 0xc1:\r\n      return undefined;\r\n    case 0xc2:\r\n      return false;\r\n    case 0xc3:\r\n      return true;\r\n    case 0xca:\r\n      return this.unpack_float();\r\n    case 0xcb:\r\n      return this.unpack_double();\r\n    case 0xcc:\r\n      return this.unpack_uint8();\r\n    case 0xcd:\r\n      return this.unpack_uint16();\r\n    case 0xce:\r\n      return this.unpack_uint32();\r\n    case 0xcf:\r\n      return this.unpack_uint64();\r\n    case 0xd0:\r\n      return this.unpack_int8();\r\n    case 0xd1:\r\n      return this.unpack_int16();\r\n    case 0xd2:\r\n      return this.unpack_int32();\r\n    case 0xd3:\r\n      return this.unpack_int64();\r\n    case 0xd4:\r\n      return undefined;\r\n    case 0xd5:\r\n      return undefined;\r\n    case 0xd6:\r\n      return undefined;\r\n    case 0xd7:\r\n      return undefined;\r\n    case 0xd8:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_string(size);\r\n    case 0xd9:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_string(size);\r\n    case 0xda:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_raw(size);\r\n    case 0xdb:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_raw(size);\r\n    case 0xdc:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_array(size);\r\n    case 0xdd:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_array(size);\r\n    case 0xde:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_map(size);\r\n    case 0xdf:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_map(size);\r\n  }\r\n};\r\n\r\nUnpacker.prototype.unpack_uint8 = function () {\r\n  var byte = this.dataView[this.index] & 0xff;\r\n  this.index++;\r\n  return byte;\r\n};\r\n\r\nUnpacker.prototype.unpack_uint16 = function () {\r\n  var bytes = this.read(2);\r\n  var uint16 =\r\n    ((bytes[0] & 0xff) * 256) + (bytes[1] & 0xff);\r\n  this.index += 2;\r\n  return uint16;\r\n};\r\n\r\nUnpacker.prototype.unpack_uint32 = function () {\r\n  var bytes = this.read(4);\r\n  var uint32 =\r\n    ((bytes[0] * 256 +\r\n      bytes[1]) * 256 +\r\n      bytes[2]) * 256 +\r\n    bytes[3];\r\n  this.index += 4;\r\n  return uint32;\r\n};\r\n\r\nUnpacker.prototype.unpack_uint64 = function () {\r\n  var bytes = this.read(8);\r\n  var uint64 =\r\n    ((((((bytes[0] * 256 +\r\n      bytes[1]) * 256 +\r\n      bytes[2]) * 256 +\r\n      bytes[3]) * 256 +\r\n      bytes[4]) * 256 +\r\n      bytes[5]) * 256 +\r\n      bytes[6]) * 256 +\r\n    bytes[7];\r\n  this.index += 8;\r\n  return uint64;\r\n};\r\n\r\nUnpacker.prototype.unpack_int8 = function () {\r\n  var uint8 = this.unpack_uint8();\r\n  return (uint8 < 0x80) ? uint8 : uint8 - (1 << 8);\r\n};\r\n\r\nUnpacker.prototype.unpack_int16 = function () {\r\n  var uint16 = this.unpack_uint16();\r\n  return (uint16 < 0x8000) ? uint16 : uint16 - (1 << 16);\r\n};\r\n\r\nUnpacker.prototype.unpack_int32 = function () {\r\n  var uint32 = this.unpack_uint32();\r\n  return (uint32 < Math.pow(2, 31)) ? uint32\r\n    : uint32 - Math.pow(2, 32);\r\n};\r\n\r\nUnpacker.prototype.unpack_int64 = function () {\r\n  var uint64 = this.unpack_uint64();\r\n  return (uint64 < Math.pow(2, 63)) ? uint64\r\n    : uint64 - Math.pow(2, 64);\r\n};\r\n\r\nUnpacker.prototype.unpack_raw = function (size) {\r\n  if (this.length < this.index + size) {\r\n    throw new Error('BinaryPackFailure: index is out of range' +\r\n      ' ' + this.index + ' ' + size + ' ' + this.length);\r\n  }\r\n  var buf = this.dataBuffer.slice(this.index, this.index + size);\r\n  this.index += size;\r\n\r\n  // buf = util.bufferToString(buf);\r\n\r\n  return buf;\r\n};\r\n\r\nUnpacker.prototype.unpack_string = function (size) {\r\n  var bytes = this.read(size);\r\n  var i = 0;\r\n  var str = '';\r\n  var c;\r\n  var code;\r\n\r\n  while (i < size) {\r\n    c = bytes[i];\r\n    if (c < 128) {\r\n      str += String.fromCharCode(c);\r\n      i++;\r\n    } else if ((c ^ 0xc0) < 32) {\r\n      code = ((c ^ 0xc0) << 6) | (bytes[i + 1] & 63);\r\n      str += String.fromCharCode(code);\r\n      i += 2;\r\n    } else {\r\n      code = ((c & 15) << 12) | ((bytes[i + 1] & 63) << 6) |\r\n        (bytes[i + 2] & 63);\r\n      str += String.fromCharCode(code);\r\n      i += 3;\r\n    }\r\n  }\r\n\r\n  this.index += size;\r\n  return str;\r\n};\r\n\r\nUnpacker.prototype.unpack_array = function (size) {\r\n  var objects = new Array(size);\r\n  for (var i = 0; i < size; i++) {\r\n    objects[i] = this.unpack();\r\n  }\r\n  return objects;\r\n};\r\n\r\nUnpacker.prototype.unpack_map = function (size) {\r\n  var map = {};\r\n  for (var i = 0; i < size; i++) {\r\n    var key = this.unpack();\r\n    var value = this.unpack();\r\n    map[key] = value;\r\n  }\r\n  return map;\r\n};\r\n\r\nUnpacker.prototype.unpack_float = function () {\r\n  var uint32 = this.unpack_uint32();\r\n  var sign = uint32 >> 31;\r\n  var exp = ((uint32 >> 23) & 0xff) - 127;\r\n  var fraction = (uint32 & 0x7fffff) | 0x800000;\r\n  return (sign === 0 ? 1 : -1) *\r\n    fraction * Math.pow(2, exp - 23);\r\n};\r\n\r\nUnpacker.prototype.unpack_double = function () {\r\n  var h32 = this.unpack_uint32();\r\n  var l32 = this.unpack_uint32();\r\n  var sign = h32 >> 31;\r\n  var exp = ((h32 >> 20) & 0x7ff) - 1023;\r\n  var hfrac = (h32 & 0xfffff) | 0x100000;\r\n  var frac = hfrac * Math.pow(2, exp - 20) +\r\n    l32 * Math.pow(2, exp - 52);\r\n  return (sign === 0 ? 1 : -1) * frac;\r\n};\r\n\r\nUnpacker.prototype.read = function (length) {\r\n  var j = this.index;\r\n  if (j + length <= this.length) {\r\n    return this.dataView.subarray(j, j + length);\r\n  } else {\r\n    throw new Error('BinaryPackFailure: read index out of range');\r\n  }\r\n};\r\n\r\nfunction Packer () {\r\n  this.bufferBuilder = new BufferBuilder();\r\n}\r\n\r\nPacker.prototype.getBuffer = function () {\r\n  return this.bufferBuilder.getBuffer();\r\n};\r\n\r\nPacker.prototype.pack = function (value) {\r\n  var type = typeof (value);\r\n  if (type === 'string') {\r\n    this.pack_string(value);\r\n  } else if (type === 'number') {\r\n    if (Math.floor(value) === value) {\r\n      this.pack_integer(value);\r\n    } else {\r\n      this.pack_double(value);\r\n    }\r\n  } else if (type === 'boolean') {\r\n    if (value === true) {\r\n      this.bufferBuilder.append(0xc3);\r\n    } else if (value === false) {\r\n      this.bufferBuilder.append(0xc2);\r\n    }\r\n  } else if (type === 'undefined') {\r\n    this.bufferBuilder.append(0xc0);\r\n  } else if (type === 'object') {\r\n    if (value === null) {\r\n      this.bufferBuilder.append(0xc0);\r\n    } else {\r\n      var constructor = value.constructor;\r\n      if (constructor == Array) {\r\n        this.pack_array(value);\r\n      } else if (constructor == Blob || constructor == File || value instanceof Blob || value instanceof File) {\r\n        this.pack_bin(value);\r\n      } else if (constructor == ArrayBuffer) {\r\n        if (binaryFeatures.useArrayBufferView) {\r\n          this.pack_bin(new Uint8Array(value));\r\n        } else {\r\n          this.pack_bin(value);\r\n        }\r\n      } else if ('BYTES_PER_ELEMENT' in value) {\r\n        if (binaryFeatures.useArrayBufferView) {\r\n          this.pack_bin(new Uint8Array(value.buffer));\r\n        } else {\r\n          this.pack_bin(value.buffer);\r\n        }\r\n      } else if ((constructor == Object) || (constructor.toString().startsWith('class'))) {\r\n        this.pack_object(value);\r\n      } else if (constructor == Date) {\r\n        this.pack_string(value.toString());\r\n      } else if (typeof value.toBinaryPack === 'function') {\r\n        this.bufferBuilder.append(value.toBinaryPack());\r\n      } else {\r\n        throw new Error('Type \"' + constructor.toString() + '\" not yet supported');\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('Type \"' + type + '\" not yet supported');\r\n  }\r\n  this.bufferBuilder.flush();\r\n};\r\n\r\nPacker.prototype.pack_bin = function (blob) {\r\n  var length = blob.length || blob.byteLength || blob.size;\r\n  if (length <= 0x0f) {\r\n    this.pack_uint8(0xa0 + length);\r\n  } else if (length <= 0xffff) {\r\n    this.bufferBuilder.append(0xda);\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff) {\r\n    this.bufferBuilder.append(0xdb);\r\n    this.pack_uint32(length);\r\n  } else {\r\n    throw new Error('Invalid length');\r\n  }\r\n  this.bufferBuilder.append(blob);\r\n};\r\n\r\nPacker.prototype.pack_string = function (str) {\r\n  var length = utf8Length(str);\r\n\r\n  if (length <= 0x0f) {\r\n    this.pack_uint8(0xb0 + length);\r\n  } else if (length <= 0xffff) {\r\n    this.bufferBuilder.append(0xd8);\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff) {\r\n    this.bufferBuilder.append(0xd9);\r\n    this.pack_uint32(length);\r\n  } else {\r\n    throw new Error('Invalid length');\r\n  }\r\n  this.bufferBuilder.append(str);\r\n};\r\n\r\nPacker.prototype.pack_array = function (ary) {\r\n  var length = ary.length;\r\n  if (length <= 0x0f) {\r\n    this.pack_uint8(0x90 + length);\r\n  } else if (length <= 0xffff) {\r\n    this.bufferBuilder.append(0xdc);\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff) {\r\n    this.bufferBuilder.append(0xdd);\r\n    this.pack_uint32(length);\r\n  } else {\r\n    throw new Error('Invalid length');\r\n  }\r\n  for (var i = 0; i < length; i++) {\r\n    this.pack(ary[i]);\r\n  }\r\n};\r\n\r\nPacker.prototype.pack_integer = function (num) {\r\n  if (num >= -0x20 && num <= 0x7f) {\r\n    this.bufferBuilder.append(num & 0xff);\r\n  } else if (num >= 0x00 && num <= 0xff) {\r\n    this.bufferBuilder.append(0xcc);\r\n    this.pack_uint8(num);\r\n  } else if (num >= -0x80 && num <= 0x7f) {\r\n    this.bufferBuilder.append(0xd0);\r\n    this.pack_int8(num);\r\n  } else if (num >= 0x0000 && num <= 0xffff) {\r\n    this.bufferBuilder.append(0xcd);\r\n    this.pack_uint16(num);\r\n  } else if (num >= -0x8000 && num <= 0x7fff) {\r\n    this.bufferBuilder.append(0xd1);\r\n    this.pack_int16(num);\r\n  } else if (num >= 0x00000000 && num <= 0xffffffff) {\r\n    this.bufferBuilder.append(0xce);\r\n    this.pack_uint32(num);\r\n  } else if (num >= -0x80000000 && num <= 0x7fffffff) {\r\n    this.bufferBuilder.append(0xd2);\r\n    this.pack_int32(num);\r\n  } else if (num >= -0x8000000000000000 && num <= 0x7FFFFFFFFFFFFFFF) {\r\n    this.bufferBuilder.append(0xd3);\r\n    this.pack_int64(num);\r\n  } else if (num >= 0x0000000000000000 && num <= 0xFFFFFFFFFFFFFFFF) {\r\n    this.bufferBuilder.append(0xcf);\r\n    this.pack_uint64(num);\r\n  } else {\r\n    throw new Error('Invalid integer');\r\n  }\r\n};\r\n\r\nPacker.prototype.pack_double = function (num) {\r\n  var sign = 0;\r\n  if (num < 0) {\r\n    sign = 1;\r\n    num = -num;\r\n  }\r\n  var exp = Math.floor(Math.log(num) / Math.LN2);\r\n  var frac0 = num / Math.pow(2, exp) - 1;\r\n  var frac1 = Math.floor(frac0 * Math.pow(2, 52));\r\n  var b32 = Math.pow(2, 32);\r\n  var h32 = (sign << 31) | ((exp + 1023) << 20) |\r\n    (frac1 / b32) & 0x0fffff;\r\n  var l32 = frac1 % b32;\r\n  this.bufferBuilder.append(0xcb);\r\n  this.pack_int32(h32);\r\n  this.pack_int32(l32);\r\n};\r\n\r\nPacker.prototype.pack_object = function (obj) {\r\n  var keys = Object.keys(obj);\r\n  var length = keys.length;\r\n  if (length <= 0x0f) {\r\n    this.pack_uint8(0x80 + length);\r\n  } else if (length <= 0xffff) {\r\n    this.bufferBuilder.append(0xde);\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff) {\r\n    this.bufferBuilder.append(0xdf);\r\n    this.pack_uint32(length);\r\n  } else {\r\n    throw new Error('Invalid length');\r\n  }\r\n  for (var prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) {\r\n      this.pack(prop);\r\n      this.pack(obj[prop]);\r\n    }\r\n  }\r\n};\r\n\r\nPacker.prototype.pack_uint8 = function (num) {\r\n  this.bufferBuilder.append(num);\r\n};\r\n\r\nPacker.prototype.pack_uint16 = function (num) {\r\n  this.bufferBuilder.append(num >> 8);\r\n  this.bufferBuilder.append(num & 0xff);\r\n};\r\n\r\nPacker.prototype.pack_uint32 = function (num) {\r\n  var n = num & 0xffffffff;\r\n  this.bufferBuilder.append((n & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((n & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((n & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((n & 0x000000ff));\r\n};\r\n\r\nPacker.prototype.pack_uint64 = function (num) {\r\n  var high = num / Math.pow(2, 32);\r\n  var low = num % Math.pow(2, 32);\r\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((high & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((high & 0x000000ff));\r\n  this.bufferBuilder.append((low & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((low & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((low & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((low & 0x000000ff));\r\n};\r\n\r\nPacker.prototype.pack_int8 = function (num) {\r\n  this.bufferBuilder.append(num & 0xff);\r\n};\r\n\r\nPacker.prototype.pack_int16 = function (num) {\r\n  this.bufferBuilder.append((num & 0xff00) >> 8);\r\n  this.bufferBuilder.append(num & 0xff);\r\n};\r\n\r\nPacker.prototype.pack_int32 = function (num) {\r\n  this.bufferBuilder.append((num >>> 24) & 0xff);\r\n  this.bufferBuilder.append((num & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((num & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((num & 0x000000ff));\r\n};\r\n\r\nPacker.prototype.pack_int64 = function (num) {\r\n  var high = Math.floor(num / Math.pow(2, 32));\r\n  var low = num % Math.pow(2, 32);\r\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((high & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((high & 0x000000ff));\r\n  this.bufferBuilder.append((low & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((low & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((low & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((low & 0x000000ff));\r\n};\r\n\r\nfunction _utf8Replace (m) {\r\n  var code = m.charCodeAt(0);\r\n\r\n  if (code <= 0x7ff) return '00';\r\n  if (code <= 0xffff) return '000';\r\n  if (code <= 0x1fffff) return '0000';\r\n  if (code <= 0x3ffffff) return '00000';\r\n  return '000000';\r\n}\r\n\r\nfunction utf8Length (str) {\r\n  if (str.length > 600) {\r\n    // Blob method faster for large strings\r\n    return (new Blob([str])).size;\r\n  } else {\r\n    return str.replace(/[^\\u0000-\\u007F]/g, _utf8Replace).length;\r\n  }\r\n}\r\n", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "import { Utils } from './utils';\nimport { Peer } from './peer';\n\nexport { Peer, Utils };\n\nexport default Peer;\n\nif (typeof window !== 'undefined') {\n  // @ts-expect-error\n  window.Peer = Peer;\n}\n", "import * as BinaryPack from 'peerjs-js-binarypack';\n\nconst DEFAULT_CONFIG = {\n  iceServers: [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'turn:0.peerjs.com:3478', username: 'peerjs', credential: 'peerjsp' },\n  ],\n  sdpSemantics: 'unified-plan',\n};\n\nexport const Utils = new (class {\n  readonly CLOUD_HOST = '0.peerjs.com';\n  readonly CLOUD_PORT = 443;\n\n  readonly chunkedMTU = 16300; // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n\n  // Returns browser-agnostic default config\n  readonly defaultConfig = DEFAULT_CONFIG;\n\n  // Ensure alphanumeric ids\n  validateId(id: string): boolean {\n    // Allow empty ids\n    return !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(id);\n  }\n\n  pack = BinaryPack.pack;\n  unpack = BinaryPack.unpack;\n\n  // Binary stuff\n\n  private _dataCount: number = 1;\n\n  chunk(blob: Blob): { __peerData: number; n: number; total: number; data: Blob }[] {\n    const chunks = [];\n    const size = blob.size;\n    const total = Math.ceil(size / Utils.chunkedMTU);\n\n    let index = 0;\n    let start = 0;\n\n    while (start < size) {\n      const end = Math.min(size, start + Utils.chunkedMTU);\n      const b = blob.slice(start, end);\n\n      const chunk = {\n        __peerData: this._dataCount,\n        n: index,\n        data: b,\n        total,\n      };\n\n      chunks.push(chunk);\n\n      start = end;\n      index++;\n    }\n\n    this._dataCount++;\n\n    return chunks;\n  }\n\n  blobToArrayBuffer(blob: Blob, cb: (arg: ArrayBuffer | null) => void): FileReader {\n    const fr = new FileReader();\n\n    fr.onload = function (evt) {\n      if (evt.target) {\n        cb(evt.target.result as ArrayBuffer);\n      }\n    };\n\n    fr.readAsArrayBuffer(blob);\n\n    return fr;\n  }\n\n  binaryStringToArrayBuffer(binary: string): ArrayBuffer | SharedArrayBuffer {\n    const byteArray = new Uint8Array(binary.length);\n\n    for (let i = 0; i < binary.length; i++) {\n      byteArray[i] = binary.charCodeAt(i) & 0xff;\n    }\n\n    return byteArray.buffer;\n  }\n\n  randomToken(): string {\n    return Math.random().toString(36).substr(2);\n  }\n\n  isSecure(): boolean {\n    return location.protocol === 'https:';\n  }\n})();\n", "import { EventEmitter } from 'eventemitter3';\nimport { Utils } from './utils';\nimport logger, { LogLevel } from './logger';\nimport { Socket } from './socket';\nimport { MediaConnection } from './mediaconnection';\nimport { DataConnection } from './dataconnection';\nimport { ConnectionType, PeerErrorType, PeerEventType, SocketEventType, ServerMessageType } from './enums';\nimport { BaseConnection } from './baseconnection';\nimport { ServerMessage } from './servermessage';\nimport { API } from './api';\nimport type { PeerConnectOption, PeerJSOption, Features } from '..';\nimport { Supports } from './supports';\n\ninterface PeerOptions extends PeerJSOption {\n  debug?: LogLevel; // 1: Errors, 2: Warnings, 3: All logs\n  logFunction?: (logLevel: LogLevel, ...rest: any[]) => void;\n}\n\n/**\n * A peer who can initiate connections with other peers.\n */\nexport class Peer extends EventEmitter {\n  private static readonly DEFAULT_KEY = 'peerjs';\n\n  private readonly _options: PeerOptions;\n  private readonly _api: API;\n  private readonly _socket: Socket;\n\n  private _id: string | null = null;\n  private _lastServerId: string | null = null;\n\n  // States.\n  private _destroyed = false; // Connections have been killed\n  private _disconnected = false; // Connection to PeerServer killed but P2P connections still active\n  private _open = false; // Sockets and such are not yet open.\n  private readonly _connections: Map<string, BaseConnection[]> = new Map(); // All connections for this peer.\n  private readonly _lostMessages: Map<string, ServerMessage[]> = new Map(); // src => [list of messages]\n\n  get id() {\n    return this._id;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get open() {\n    return this._open;\n  }\n\n  get socket() {\n    return this._socket;\n  }\n\n  /**\n   * @deprecated\n   * Return type will change from Object to Map<string,[]>\n   */\n  get connections(): Object {\n    const plainConnections = Object.create(null);\n\n    for (let [k, v] of this._connections) {\n      plainConnections[k] = v;\n    }\n\n    return plainConnections;\n  }\n\n  get destroyed() {\n    return this._destroyed;\n  }\n  get disconnected() {\n    return this._disconnected;\n  }\n\n  readonly features: Features;\n\n  constructor(id?: string | PeerOptions, options?: PeerOptions) {\n    super();\n\n    let userId: string | undefined;\n\n    // Deal with overloading\n    if (id && id.constructor == Object) {\n      options = id as PeerOptions;\n    } else if (id) {\n      userId = id.toString();\n    }\n\n    // Configure options\n    options = {\n      debug: 0, // 1: Errors, 2: Warnings, 3: All logs\n      host: Utils.CLOUD_HOST,\n      port: Utils.CLOUD_PORT,\n      path: '/',\n      key: Peer.DEFAULT_KEY,\n      token: Utils.randomToken(),\n      config: Utils.defaultConfig,\n      ...options,\n    };\n    this._options = options;\n\n    // Detect relative URL host.\n    if (typeof window !== 'undefined' && this._options.host === '/') {\n      this._options.host = window.location.hostname;\n    }\n\n    // Set path correctly.\n    if (this._options.path) {\n      if (this._options.path[0] !== '/') {\n        this._options.path = '/' + this._options.path;\n      }\n      if (this._options.path[this._options.path.length - 1] !== '/') {\n        this._options.path += '/';\n      }\n    }\n\n    // Set whether we use SSL to same as current host\n    if (this._options.secure === undefined && this._options.host !== Utils.CLOUD_HOST) {\n      this._options.secure = Utils.isSecure();\n    } else if (this._options.host == Utils.CLOUD_HOST) {\n      this._options.secure = true;\n    }\n    // Set a custom log function if present\n    if (this._options.logFunction) {\n      logger.setLogFunction(this._options.logFunction);\n    }\n\n    logger.logLevel = this._options.debug || 0;\n\n    this._api = new API(options);\n    this._socket = this._createServerConnection();\n\n    this.features = Peer.getFeatures(this._options.polyfills?.WebRTC);\n\n    // Sanity checks\n    // Ensure WebRTC supported\n    if (!this.features.audioVideo && !this.features.data) {\n      this._delayedAbort(PeerErrorType.BrowserIncompatible, 'The current browser does not support WebRTC');\n      return;\n    }\n\n    // Ensure alphanumeric id\n    if (!!userId && !Utils.validateId(userId)) {\n      this._delayedAbort(PeerErrorType.InvalidID, `ID \"${userId}\" is invalid`);\n      return;\n    }\n\n    if (userId) {\n      this._initialize(userId);\n    } else {\n      this._api\n        .retrieveId()\n        .then(id => this._initialize(id))\n        .catch(error => this._abort(PeerErrorType.ServerError, error));\n    }\n  }\n\n  private _createServerConnection(): Socket {\n    const socket = new Socket(this._options);\n\n    socket.on(SocketEventType.Message, (data: ServerMessage) => {\n      this._handleMessage(data);\n    });\n\n    socket.on(SocketEventType.Error, (error: string) => {\n      this._abort(PeerErrorType.SocketError, error);\n    });\n\n    socket.on(SocketEventType.Disconnected, () => {\n      if (this.disconnected) {\n        return;\n      }\n\n      this.emitError(PeerErrorType.Network, 'Lost connection to server.');\n      this.disconnect();\n    });\n\n    socket.on(SocketEventType.Close, () => {\n      if (this.disconnected) {\n        return;\n      }\n\n      this._abort(PeerErrorType.SocketClosed, 'Underlying socket is already closed.');\n    });\n\n    return socket;\n  }\n\n  /** Initialize a connection with the server. */\n  private _initialize(id: string): void {\n    this._id = id;\n    this.socket.start(id, this._options.token!);\n  }\n\n  /** Handles messages from the server. */\n  private _handleMessage(message: ServerMessage): void {\n    const type = message.type;\n    const payload = message.payload;\n    const peerId = message.src;\n\n    switch (type) {\n      case ServerMessageType.Open: // The connection to the server is open.\n        this._lastServerId = this.id;\n        this._open = true;\n        this.emit(PeerEventType.Open, this.id);\n        break;\n      case ServerMessageType.Error: // Server error.\n        this._abort(PeerErrorType.ServerError, payload.msg);\n        break;\n      case ServerMessageType.IdTaken: // The selected ID is taken.\n        this._abort(PeerErrorType.UnavailableID, `ID \"${this.id}\" is taken`);\n        break;\n      case ServerMessageType.InvalidKey: // The given API key cannot be found.\n        this._abort(PeerErrorType.InvalidKey, `API KEY \"${this._options.key}\" is invalid`);\n        break;\n      case ServerMessageType.Leave: // Another peer has closed its connection to this peer.\n        logger.log(`Received leave message from ${peerId}`);\n        this._cleanupPeer(peerId);\n        this._connections.delete(peerId);\n        break;\n      case ServerMessageType.Expire: // The offer sent to a peer has expired without response.\n        this.emitError(PeerErrorType.PeerUnavailable, `Could not connect to peer ${peerId}`);\n        break;\n      case ServerMessageType.Offer: {\n        // we should consider switching this to CALL/CONNECT, but this is the least breaking option.\n        const connectionId = payload.connectionId;\n        let connection = this.getConnection(peerId, connectionId);\n\n        if (connection) {\n          connection.close();\n          logger.warn(`Offer received for existing Connection ID:${connectionId}`);\n        }\n\n        // Create a new connection.\n        if (payload.type === ConnectionType.Media) {\n          connection = new MediaConnection(peerId, this, {\n            connectionId: connectionId,\n            _payload: payload,\n            metadata: payload.metadata,\n          });\n          this._addConnection(peerId, connection);\n          this.emit(PeerEventType.Call, connection);\n        } else if (payload.type === ConnectionType.Data) {\n          connection = new DataConnection(peerId, this, {\n            connectionId: connectionId,\n            _payload: payload,\n            metadata: payload.metadata,\n            label: payload.label,\n            serialization: payload.serialization,\n            reliable: payload.reliable,\n          });\n          this._addConnection(peerId, connection);\n          this.emit(PeerEventType.Connection, connection);\n        } else {\n          logger.warn(`Received malformed connection type:${payload.type}`);\n          return;\n        }\n\n        // Find messages.\n        const messages = this._getMessages(connectionId);\n        for (let message of messages) {\n          connection.handleMessage(message);\n        }\n\n        break;\n      }\n      default: {\n        if (!payload) {\n          logger.warn(`You received a malformed message from ${peerId} of type ${type}`);\n          return;\n        }\n\n        const connectionId = payload.connectionId;\n        const connection = this.getConnection(peerId, connectionId);\n\n        if (connection && connection.peerConnection) {\n          // Pass it on.\n          connection.handleMessage(message);\n        } else if (connectionId) {\n          // Store for possible later use\n          this._storeMessage(connectionId, message);\n        } else {\n          logger.warn('You received an unrecognized message:', message);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Stores messages without a set up connection, to be claimed later. */\n  private _storeMessage(connectionId: string, message: ServerMessage): void {\n    if (!this._lostMessages.has(connectionId)) {\n      this._lostMessages.set(connectionId, []);\n    }\n\n    this._lostMessages.get(connectionId).push(message);\n  }\n\n  /** Retrieve messages from lost message store */\n  //TODO Change it to private\n  public _getMessages(connectionId: string): ServerMessage[] {\n    const messages = this._lostMessages.get(connectionId);\n\n    if (messages) {\n      this._lostMessages.delete(connectionId);\n      return messages;\n    }\n\n    return [];\n  }\n\n  /**\n   * Returns a DataConnection to the specified peer. See documentation for a\n   * complete list of options.\n   */\n  connect(peer: string, options: PeerConnectOption = {}): DataConnection {\n    if (this.disconnected) {\n      logger.warn(\n        'You cannot connect to a new Peer because you called ' +\n          '.disconnect() on this Peer and ended your connection with the ' +\n          'server. You can create a new Peer to reconnect, or call reconnect ' +\n          'on this peer if you believe its ID to still be available.'\n      );\n      this.emitError(PeerErrorType.Disconnected, 'Cannot connect to new Peer after disconnecting from server.');\n      return;\n    }\n\n    const dataConnection = new DataConnection(peer, this, options);\n    this._addConnection(peer, dataConnection);\n    return dataConnection;\n  }\n\n  /**\n   * Returns a MediaConnection to the specified peer. See documentation for a\n   * complete list of options.\n   */\n  call(peer: string, stream: MediaStream, options: any = {}): MediaConnection {\n    if (this.disconnected) {\n      logger.warn(\n        'You cannot connect to a new Peer because you called ' +\n          '.disconnect() on this Peer and ended your connection with the ' +\n          'server. You can create a new Peer to reconnect.'\n      );\n      this.emitError(PeerErrorType.Disconnected, 'Cannot connect to new Peer after disconnecting from server.');\n      return;\n    }\n\n    if (!stream) {\n      logger.error(\"To call a peer, you must provide a stream from your browser's `getUserMedia`.\");\n      return;\n    }\n\n    options._stream = stream;\n\n    const mediaConnection = new MediaConnection(peer, this, options);\n    this._addConnection(peer, mediaConnection);\n    return mediaConnection;\n  }\n\n  /** Add a data/media connection to this peer. */\n  private _addConnection(peerId: string, connection: BaseConnection): void {\n    logger.log(`add connection ${connection.type}:${connection.connectionId} to peerId:${peerId}`);\n\n    if (!this._connections.has(peerId)) {\n      this._connections.set(peerId, []);\n    }\n    this._connections.get(peerId).push(connection);\n  }\n\n  //TODO should be private\n  _removeConnection(connection: BaseConnection): void {\n    const connections = this._connections.get(connection.peer);\n\n    if (connections) {\n      const index = connections.indexOf(connection);\n\n      if (index !== -1) {\n        connections.splice(index, 1);\n      }\n    }\n\n    //remove from lost messages\n    this._lostMessages.delete(connection.connectionId);\n  }\n\n  /** Retrieve a data/media connection for this peer. */\n  getConnection(peerId: string, connectionId: string): null | BaseConnection {\n    const connections = this._connections.get(peerId);\n    if (!connections) {\n      return null;\n    }\n\n    for (let connection of connections) {\n      if (connection.connectionId === connectionId) {\n        return connection;\n      }\n    }\n\n    return null;\n  }\n\n  private _delayedAbort(type: PeerErrorType, message: string | Error): void {\n    setTimeout(() => {\n      this._abort(type, message);\n    }, 0);\n  }\n\n  /**\n   * Emits an error message and destroys the Peer.\n   * The Peer is not destroyed if it's in a disconnected state, in which case\n   * it retains its disconnected state and its existing connections.\n   */\n  private _abort(type: PeerErrorType, message: string | Error): void {\n    logger.error('Aborting!');\n\n    this.emitError(type, message);\n\n    if (!this._lastServerId) {\n      this.destroy();\n    } else {\n      this.disconnect();\n    }\n  }\n\n  /** Emits a typed error message. */\n  emitError(type: PeerErrorType, err: string | Error): void {\n    logger.error('Error:', err);\n\n    let error: Error & { type?: PeerErrorType };\n\n    if (typeof err === 'string') {\n      error = new Error(err);\n    } else {\n      error = err as Error;\n    }\n\n    error.type = type;\n\n    this.emit(PeerEventType.Error, error);\n  }\n\n  /**\n   * Destroys the Peer: closes all active connections as well as the connection\n   *  to the server.\n   * Warning: The peer can no longer create or accept connections after being\n   *  destroyed.\n   */\n  destroy(): void {\n    if (this.destroyed) {\n      return;\n    }\n\n    logger.log(`Destroy peer with ID:${this.id}`);\n\n    this.disconnect();\n    this._cleanup();\n\n    this._destroyed = true;\n\n    this.emit(PeerEventType.Close);\n  }\n\n  /** Disconnects every connection on this peer. */\n  private _cleanup(): void {\n    for (let peerId of this._connections.keys()) {\n      this._cleanupPeer(peerId);\n      this._connections.delete(peerId);\n    }\n\n    this.socket.removeAllListeners();\n  }\n\n  /** Closes all connections to this peer. */\n  private _cleanupPeer(peerId: string): void {\n    const connections = this._connections.get(peerId);\n\n    if (!connections) return;\n\n    for (let connection of connections) {\n      connection.close();\n    }\n  }\n\n  /**\n   * Disconnects the Peer's connection to the PeerServer. Does not close any\n   *  active connections.\n   * Warning: The peer can no longer create or accept connections after being\n   *  disconnected. It also cannot reconnect to the server.\n   */\n  disconnect(): void {\n    if (this.disconnected) {\n      return;\n    }\n\n    const currentId = this.id;\n\n    logger.log(`Disconnect peer with ID:${currentId}`);\n\n    this._disconnected = true;\n    this._open = false;\n\n    this.socket.close();\n\n    this._lastServerId = currentId;\n    this._id = null;\n\n    this.emit(PeerEventType.Disconnected, currentId);\n  }\n\n  /** Attempts to reconnect with the same ID. */\n  reconnect(): void {\n    if (this.disconnected && !this.destroyed) {\n      logger.log(`Attempting reconnection to server with ID ${this._lastServerId}`);\n      this._disconnected = false;\n      this._initialize(this._lastServerId!);\n    } else if (this.destroyed) {\n      throw new Error('This peer cannot reconnect to the server. It has already been destroyed.');\n    } else if (!this.disconnected && !this.open) {\n      // Do nothing. We're still connecting the first time.\n      logger.error(\"In a hurry? We're still trying to make the initial connection!\");\n    } else {\n      throw new Error(`Peer ${this.id} cannot reconnect because it is not disconnected from the server!`);\n    }\n  }\n\n  /**\n   * Get a list of available peer IDs. If you're running your own server, you'll\n   * want to set allow_discovery: true in the PeerServer options. If you're using\n   * the cloud server, email team@peerjs.com to get the functionality enabled for\n   * your key.\n   */\n  listAllPeers(cb = (_: any[]) => {}): void {\n    this._api\n      .listAllPeers()\n      .then(peers => cb(peers))\n      .catch(error => this._abort(PeerErrorType.ServerError, error));\n  }\n\n  static getFeatures(webRtc: any): Features {\n    if (!webRtc && typeof window !== 'undefined') {\n      webRtc = window;\n    }\n\n    if (!Peer._features) {\n      Peer._features = Peer.checkFeatures(webRtc);\n    }\n\n    return Peer._features;\n  }\n\n  private static _features?: Features;\n\n  // Lists which features are supported\n  private static checkFeatures(webRtc: any): Features {\n    if (!webRtc && typeof window !== 'undefined') {\n      webRtc = window;\n    }\n\n    const supported: Features = {\n      webRTC: typeof webRtc.RTCPeerConnection !== 'undefined',\n      audioVideo: true,\n      data: false,\n      binaryBlob: false,\n      reliable: false,\n      unifiedPlan: false,\n    };\n\n    if (!supported.webRTC) return supported;\n\n    let pc: RTCPeerConnection;\n\n    try {\n      pc = new webRtc.RTCPeerConnection(Utils.defaultConfig);\n      let dc: RTCDataChannel;\n\n      try {\n        dc = pc.createDataChannel('_PEERJSTEST', { ordered: true });\n        supported.data = true;\n        supported.reliable = !!dc.ordered;\n\n        // Binary test\n        try {\n          dc.binaryType = 'blob';\n          supported.binaryBlob = true; //not works for iOS?\n        } catch (e) {}\n      } catch (e) {\n      } finally {\n        if (dc) {\n          dc.close();\n        }\n      }\n    } catch (e) {\n    } finally {\n      if (pc) {\n        pc.close();\n      }\n    }\n\n    supported.unifiedPlan = Supports.isUnifiedPlanSupported(webRtc);\n\n    return supported;\n  }\n}\n", "const LOG_PREFIX = 'PeerJS: ';\n\n/*\nPrints log messages depending on the debug level passed in. Defaults to 0.\n0  Prints no logs.\n1  Prints only errors.\n2  Prints errors and warnings.\n3  Prints all logs.\n*/\nexport enum LogLevel {\n  Disabled,\n  Errors,\n  Warnings,\n  All,\n}\n\nclass Logger {\n  private _logLevel = LogLevel.Disabled;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(logLevel: LogLevel) {\n    this._logLevel = logLevel;\n  }\n\n  log(...args: any[]) {\n    if (this._logLevel >= LogLevel.All) {\n      this._print(LogLevel.All, ...args);\n    }\n  }\n\n  warn(...args: any[]) {\n    if (this._logLevel >= LogLevel.Warnings) {\n      this._print(LogLevel.Warnings, ...args);\n    }\n  }\n\n  error(...args: any[]) {\n    if (this._logLevel >= LogLevel.Errors) {\n      this._print(LogLevel.Errors, ...args);\n    }\n  }\n\n  setLogFunction(fn: (logLevel: LogLevel, ..._: any[]) => void): void {\n    this._print = fn;\n  }\n\n  private _print(logLevel: LogLevel, ...rest: any[]): void {\n    const copy = [LOG_PREFIX, ...rest];\n\n    for (let i in copy) {\n      if (copy[i] instanceof Error) {\n        copy[i] = '(' + copy[i].name + ') ' + copy[i].message;\n      }\n    }\n\n    if (logLevel >= LogLevel.All) {\n      console.log(...copy);\n    } else if (logLevel >= LogLevel.Warnings) {\n      console.warn('WARNING', ...copy);\n    } else if (logLevel >= LogLevel.Errors) {\n      console.error('ERROR', ...copy);\n    }\n  }\n}\n\nexport default new Logger();\n", "import { EventEmitter } from 'eventemitter3';\nimport logger from './logger';\nimport { SocketEventType, ServerMessageType } from './enums';\nimport type { PeerJSOption } from '../index';\n\n/**\n * An abstraction on top of WebSockets to provide the fastest\n * possible connection for peers.\n */\nexport class Socket extends EventEmitter {\n  private _disconnected: boolean = true;\n  private _id?: string;\n  private _messagesQueue: Array<object> = [];\n  private _socket?: WebSocket;\n  private _wsPingTimer?: any;\n  private readonly _baseUrl: string;\n\n  private readonly pingInterval: number;\n  private readonly WebSocketConstructor: typeof WebSocket;\n\n  constructor({ secure, host, port, path, key, pingInterval = 5000, polyfills }: PeerJSOption) {\n    super();\n\n    this.pingInterval = pingInterval;\n\n    const wsProtocol = secure ? 'wss://' : 'ws://';\n\n    this._baseUrl = wsProtocol + host + ':' + port + path + 'peerjs?key=' + key;\n    this.WebSocketConstructor = polyfills?.WebSocket ?? window.WebSocket;\n  }\n\n  start(id: string, token: string): void {\n    this._id = id;\n\n    const wsUrl = `${this._baseUrl}&id=${id}&token=${token}`;\n\n    if (!!this._socket || !this._disconnected) {\n      return;\n    }\n\n    this._socket = new this.WebSocketConstructor(wsUrl);\n    this._disconnected = false;\n\n    this._socket.onmessage = event => {\n      let data;\n\n      try {\n        data = JSON.parse(event.data);\n        logger.log('Server message received:', data);\n      } catch (e) {\n        logger.log('Invalid server message', event.data);\n        return;\n      }\n\n      this.emit(SocketEventType.Message, data);\n    };\n\n    this._socket.onclose = event => {\n      if (this._disconnected) {\n        return;\n      }\n\n      logger.log('Socket closed.', event);\n\n      this._cleanup();\n      this._disconnected = true;\n\n      this.emit(SocketEventType.Disconnected);\n    };\n\n    // Take care of the queue of connections if necessary and make sure Peer knows\n    // socket is open.\n    this._socket.onopen = () => {\n      if (this._disconnected) {\n        return;\n      }\n\n      this._sendQueuedMessages();\n\n      logger.log('Socket open');\n\n      this._scheduleHeartbeat();\n    };\n  }\n\n  private _scheduleHeartbeat(): void {\n    this._wsPingTimer = setTimeout(() => {\n      this._sendHeartbeat();\n    }, this.pingInterval);\n  }\n\n  private _sendHeartbeat(): void {\n    if (!this._wsOpen()) {\n      logger.log(`Cannot send heartbeat, because socket closed`);\n      return;\n    }\n\n    const message = JSON.stringify({ type: ServerMessageType.Heartbeat });\n\n    this._socket!.send(message);\n\n    this._scheduleHeartbeat();\n  }\n\n  /** Is the websocket currently open? */\n  private _wsOpen(): boolean {\n    return !!this._socket && this._socket.readyState === 1;\n  }\n\n  /** Send queued messages. */\n  private _sendQueuedMessages(): void {\n    //Create copy of queue and clear it,\n    //because send method push the message back to queue if smth will go wrong\n    const copiedQueue = [...this._messagesQueue];\n    this._messagesQueue = [];\n\n    for (const message of copiedQueue) {\n      this.send(message);\n    }\n  }\n\n  /** Exposed send for DC & Peer. */\n  send(data: any): void {\n    if (this._disconnected) {\n      return;\n    }\n\n    // If we didn't get an ID yet, we can't yet send anything so we should queue\n    // up these messages.\n    if (!this._id) {\n      this._messagesQueue.push(data);\n      return;\n    }\n\n    if (!data.type) {\n      this.emit(SocketEventType.Error, 'Invalid message');\n      return;\n    }\n\n    if (!this._wsOpen()) {\n      return;\n    }\n\n    const message = JSON.stringify(data);\n\n    this._socket!.send(message);\n  }\n\n  close(): void {\n    if (this._disconnected) {\n      return;\n    }\n\n    this._cleanup();\n\n    this._disconnected = true;\n  }\n\n  private _cleanup(): void {\n    if (this._socket) {\n      this._socket.onopen = this._socket.onmessage = this._socket.onclose = null;\n      this._socket.close();\n      this._socket = undefined;\n    }\n\n    clearTimeout(this._wsPingTimer!);\n  }\n}\n", "import logger from './logger';\nimport type { MediaConnection } from './mediaconnection';\nimport type { DataConnection } from './dataconnection';\nimport { ConnectionType, PeerErrorType, ConnectionEventType, ServerMessageType } from './enums';\nimport { BaseConnection } from './baseconnection';\n\nfunction noop(): void {}\n/**\n * Manages all negotiations between Peers.\n */\nexport class Negotiator {\n  constructor(readonly connection: BaseConnection) {}\n\n  private get webRtc() {\n    return this.connection.provider.options.polyfills?.WebRTC ?? window;\n  }\n\n  /** Returns a PeerConnection object set up correctly (for data, media). */\n  startConnection(options: any) {\n    const peerConnection = this._startPeerConnection();\n\n    // Set the connection's PC.\n    this.connection.peerConnection = peerConnection;\n\n    if (this.connection.type === ConnectionType.Media && options._stream) {\n      this._addTracksToConnection(options._stream, peerConnection);\n    }\n\n    // What do we need to do now?\n    if (options.originator) {\n      if (this.connection.type === ConnectionType.Data) {\n        const dataConnection = this.connection as DataConnection;\n\n        const config: RTCDataChannelInit = { ordered: !!options.reliable };\n\n        const dataChannel = peerConnection.createDataChannel(dataConnection.label, config);\n        dataConnection.initialize(dataChannel);\n      }\n\n      this._makeOffer();\n    } else {\n      this.handleSDP('OFFER', options.sdp);\n    }\n  }\n\n  /** Start a PC. */\n  private _startPeerConnection(): RTCPeerConnection {\n    logger.log('Creating RTCPeerConnection.');\n\n    const ctr: typeof RTCPeerConnection = this.webRtc.RTCPeerConnection;\n\n    const peerConnection = new ctr(this.connection.provider.options.config);\n\n    this._setupListeners(peerConnection);\n\n    return peerConnection;\n  }\n\n  /** Set up various WebRTC listeners. */\n  private _setupListeners(peerConnection: RTCPeerConnection) {\n    const peerId = this.connection.peer;\n    const connectionId = this.connection.connectionId;\n    const connectionType = this.connection.type;\n    const provider = this.connection.provider;\n\n    // ICE CANDIDATES.\n    logger.log('Listening for ICE candidates.');\n\n    peerConnection.onicecandidate = evt => {\n      if (!evt.candidate || !evt.candidate.candidate) return;\n\n      logger.log(`Received ICE candidates for ${peerId}:`, evt.candidate);\n\n      provider.socket.send({\n        type: ServerMessageType.Candidate,\n        payload: {\n          candidate: evt.candidate,\n          type: connectionType,\n          connectionId: connectionId,\n        },\n        dst: peerId,\n      });\n    };\n\n    peerConnection.oniceconnectionstatechange = () => {\n      switch (peerConnection.iceConnectionState) {\n        case 'failed':\n          logger.log('iceConnectionState is failed, closing connections to ' + peerId);\n          this.connection.emit(\n            ConnectionEventType.Error,\n            new Error('Negotiation of connection to ' + peerId + ' failed.')\n          );\n          this.connection.close();\n          break;\n        case 'closed':\n          logger.log('iceConnectionState is closed, closing connections to ' + peerId);\n          this.connection.emit(ConnectionEventType.Error, new Error('Connection to ' + peerId + ' closed.'));\n          this.connection.close();\n          break;\n        case 'disconnected':\n          logger.log('iceConnectionState changed to disconnected on the connection with ' + peerId);\n          break;\n        case 'completed':\n          peerConnection.onicecandidate = noop;\n          break;\n      }\n\n      this.connection.emit(ConnectionEventType.IceStateChanged, peerConnection.iceConnectionState);\n    };\n\n    // DATACONNECTION.\n    logger.log('Listening for data channel');\n    // Fired between offer and answer, so options should already be saved\n    // in the options hash.\n    peerConnection.ondatachannel = evt => {\n      logger.log('Received data channel');\n\n      const dataChannel = evt.channel;\n      const connection = provider.getConnection(peerId, connectionId) as DataConnection;\n\n      connection.initialize(dataChannel);\n    };\n\n    // MEDIACONNECTION.\n    logger.log('Listening for remote stream');\n\n    peerConnection.ontrack = evt => {\n      logger.log('Received remote stream');\n\n      const stream = evt.streams[0];\n      const connection = provider.getConnection(peerId, connectionId);\n\n      if (connection.type === ConnectionType.Media) {\n        const mediaConnection = connection as MediaConnection;\n\n        this._addStreamToMediaConnection(stream, mediaConnection);\n      }\n    };\n  }\n\n  cleanup(): void {\n    logger.log('Cleaning up PeerConnection to ' + this.connection.peer);\n\n    const peerConnection = this.connection.peerConnection;\n\n    if (!peerConnection) {\n      return;\n    }\n\n    this.connection.peerConnection = null;\n\n    //unsubscribe from all PeerConnection's events\n    peerConnection.onicecandidate =\n      peerConnection.oniceconnectionstatechange =\n      peerConnection.ondatachannel =\n      peerConnection.ontrack =\n        noop;\n\n    const peerConnectionNotClosed = peerConnection.signalingState !== 'closed';\n    let dataChannelNotClosed = false;\n\n    if (this.connection.type === ConnectionType.Data) {\n      const dataConnection = this.connection as DataConnection;\n      const dataChannel = dataConnection.dataChannel;\n\n      if (dataChannel) {\n        dataChannelNotClosed = !!dataChannel.readyState && dataChannel.readyState !== 'closed';\n      }\n    }\n\n    if (peerConnectionNotClosed || dataChannelNotClosed) {\n      peerConnection.close();\n    }\n  }\n\n  private async _makeOffer(): Promise<void> {\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    try {\n      const offer = await peerConnection.createOffer(this.connection.options.constraints);\n\n      logger.log('Created offer.');\n\n      if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === 'function') {\n        offer.sdp = this.connection.options.sdpTransform(offer.sdp) || offer.sdp;\n      }\n\n      try {\n        await peerConnection.setLocalDescription(offer);\n\n        logger.log('Set localDescription:', offer, `for:${this.connection.peer}`);\n\n        let payload: any = {\n          sdp: offer,\n          type: this.connection.type,\n          connectionId: this.connection.connectionId,\n          metadata: this.connection.metadata,\n        };\n\n        if (this.connection.type === ConnectionType.Data) {\n          const dataConnection = this.connection as DataConnection;\n\n          payload = {\n            ...payload,\n            label: dataConnection.label,\n            reliable: dataConnection.reliable,\n            serialization: dataConnection.serialization,\n          };\n        }\n\n        provider.socket.send({\n          type: ServerMessageType.Offer,\n          payload,\n          dst: this.connection.peer,\n        });\n      } catch (err) {\n        // TODO: investigate why _makeOffer is being called from the answer\n        if (err != 'OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer') {\n          provider.emitError(PeerErrorType.WebRTC, err);\n          logger.log('Failed to setLocalDescription, ', err);\n        }\n      }\n    } catch (err_1) {\n      provider.emitError(PeerErrorType.WebRTC, err_1);\n      logger.log('Failed to createOffer, ', err_1);\n    }\n  }\n\n  private async _makeAnswer(): Promise<void> {\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    try {\n      const answer = await peerConnection.createAnswer();\n      logger.log('Created answer.');\n\n      if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === 'function') {\n        answer.sdp = this.connection.options.sdpTransform(answer.sdp) || answer.sdp;\n      }\n\n      try {\n        await peerConnection.setLocalDescription(answer);\n\n        logger.log(`Set localDescription:`, answer, `for:${this.connection.peer}`);\n\n        provider.socket.send({\n          type: ServerMessageType.Answer,\n          payload: {\n            sdp: answer,\n            type: this.connection.type,\n            connectionId: this.connection.connectionId,\n          },\n          dst: this.connection.peer,\n        });\n      } catch (err) {\n        provider.emitError(PeerErrorType.WebRTC, err);\n        logger.log('Failed to setLocalDescription, ', err);\n      }\n    } catch (err_1) {\n      provider.emitError(PeerErrorType.WebRTC, err_1);\n      logger.log('Failed to create answer, ', err_1);\n    }\n  }\n\n  /** Handle an SDP. */\n  async handleSDP(type: string, sdp: any): Promise<void> {\n    const ctr: typeof RTCSessionDescription = this.webRtc.RTCSessionDescription;\n\n    sdp = new ctr(sdp);\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    logger.log('Setting remote description', sdp);\n\n    const self = this;\n\n    try {\n      await peerConnection.setRemoteDescription(sdp);\n      logger.log(`Set remoteDescription:${type} for:${this.connection.peer}`);\n      if (type === 'OFFER') {\n        await self._makeAnswer();\n      }\n    } catch (err) {\n      provider.emitError(PeerErrorType.WebRTC, err);\n      logger.log('Failed to setRemoteDescription, ', err);\n    }\n  }\n\n  /** Handle a candidate. */\n  async handleCandidate(ice: any): Promise<void> {\n    logger.log(`handleCandidate:`, ice);\n\n    const candidate = ice.candidate;\n    const sdpMLineIndex = ice.sdpMLineIndex;\n    const sdpMid = ice.sdpMid;\n    const peerConnection = this.connection.peerConnection;\n    const provider = this.connection.provider;\n\n    try {\n      const ctr: typeof RTCIceCandidate = this.webRtc.RTCIceCandidate;\n\n      await peerConnection.addIceCandidate(\n        new ctr({\n          sdpMid: sdpMid,\n          sdpMLineIndex: sdpMLineIndex,\n          candidate: candidate,\n        })\n      );\n      logger.log(`Added ICE candidate for:${this.connection.peer}`);\n    } catch (err) {\n      provider.emitError(PeerErrorType.WebRTC, err);\n      logger.log('Failed to handleCandidate, ', err);\n    }\n  }\n\n  private _addTracksToConnection(stream: MediaStream, peerConnection: RTCPeerConnection): void {\n    logger.log(`add tracks from stream ${stream.id} to peer connection`);\n\n    if (!peerConnection.addTrack) {\n      return logger.error(`Your browser does't support RTCPeerConnection#addTrack. Ignored.`);\n    }\n\n    stream.getTracks().forEach(track => {\n      peerConnection.addTrack(track, stream);\n    });\n  }\n\n  private _addStreamToMediaConnection(stream: MediaStream, mediaConnection: MediaConnection): void {\n    logger.log(`add stream ${stream.id} to media connection ${mediaConnection.connectionId}`);\n\n    mediaConnection.addStream(stream);\n  }\n}\n", "import { EventEmitter } from 'eventemitter3';\nimport type { Peer } from './peer';\nimport type { ServerMessage } from './servermessage';\nimport type { ConnectionType } from './enums';\n\nexport abstract class BaseConnection extends EventEmitter {\n  protected _open = false;\n\n  readonly metadata: any;\n  connectionId: string;\n\n  peerConnection: RTCPeerConnection;\n\n  abstract get type(): ConnectionType;\n\n  get open() {\n    return this._open;\n  }\n\n  constructor(readonly peer: string, public provider: Peer, readonly options: any) {\n    super();\n\n    this.metadata = options.metadata;\n  }\n\n  abstract close(): void;\n\n  abstract handleMessage(message: ServerMessage): void;\n}\n", "import { Utils } from './utils';\nimport logger from './logger';\nimport { Negotiator } from './negotiator';\nimport { ConnectionType, ConnectionEventType, ServerMessageType } from './enums';\nimport type { Peer } from './peer';\nimport { BaseConnection } from './baseconnection';\nimport type { ServerMessage } from './servermessage';\nimport type { AnswerOption } from '..';\n\n/**\n * Wraps the streaming interface between two Peers.\n */\nexport class MediaConnection extends BaseConnection {\n  private static readonly ID_PREFIX = 'mc_';\n\n  private _negotiator: Negotiator;\n  private _localStream: MediaStream;\n  private _remoteStream: MediaStream;\n\n  get type() {\n    return ConnectionType.Media;\n  }\n\n  get localStream(): MediaStream {\n    return this._localStream;\n  }\n  get remoteStream(): MediaStream {\n    return this._remoteStream;\n  }\n\n  constructor(peerId: string, provider: Peer, options: any) {\n    super(peerId, provider, options);\n\n    this._localStream = this.options._stream;\n    this.connectionId = this.options.connectionId || MediaConnection.ID_PREFIX + Utils.randomToken();\n\n    this._negotiator = new Negotiator(this);\n\n    if (this._localStream) {\n      this._negotiator.startConnection({\n        _stream: this._localStream,\n        originator: true,\n      });\n    }\n  }\n\n  addStream(remoteStream) {\n    logger.log('Receiving stream', remoteStream);\n\n    this._remoteStream = remoteStream;\n    super.emit(ConnectionEventType.Stream, remoteStream); // Should we call this `open`?\n  }\n\n  handleMessage(message: ServerMessage): void {\n    const type = message.type;\n    const payload = message.payload;\n\n    switch (message.type) {\n      case ServerMessageType.Answer:\n        // Forward to negotiator\n        this._negotiator.handleSDP(type, payload.sdp);\n        this._open = true;\n        break;\n      case ServerMessageType.Candidate:\n        this._negotiator.handleCandidate(payload.candidate);\n        break;\n      default:\n        logger.warn(`Unrecognized message type:${type} from peer:${this.peer}`);\n        break;\n    }\n  }\n\n  answer(stream: MediaStream, options: AnswerOption = {}): void {\n    if (this._localStream) {\n      logger.warn('Local stream already exists on this MediaConnection. Are you answering a call twice?');\n      return;\n    }\n\n    this._localStream = stream;\n\n    if (options && options.sdpTransform) {\n      this.options.sdpTransform = options.sdpTransform;\n    }\n\n    this._negotiator.startConnection({ ...this.options._payload, _stream: stream });\n    // Retrieve lost messages stored because PeerConnection not set up.\n    const messages = this.provider._getMessages(this.connectionId);\n\n    for (let message of messages) {\n      this.handleMessage(message);\n    }\n\n    this._open = true;\n  }\n\n  /**\n   * Exposed functionality for users.\n   */\n\n  /** Allows user to close connection. */\n  close(): void {\n    if (this._negotiator) {\n      this._negotiator.cleanup();\n      this._negotiator = null;\n    }\n\n    this._localStream = null;\n    this._remoteStream = null;\n\n    if (this.provider) {\n      this.provider._removeConnection(this);\n\n      this.provider = null;\n    }\n\n    if (this.options && this.options._stream) {\n      this.options._stream = null;\n    }\n\n    if (!this.open) {\n      return;\n    }\n\n    this._open = false;\n\n    super.emit(ConnectionEventType.Close);\n  }\n}\n", "import { EventEmitter } from 'eventemitter3';\nimport logger from './logger';\n\nexport class EncodingQueue extends EventEmitter {\n  readonly fileReader: FileReader = new FileReader();\n\n  private _queue: Blob[] = [];\n  private _processing: boolean = false;\n\n  constructor() {\n    super();\n\n    this.fileReader.onload = evt => {\n      this._processing = false;\n\n      if (evt.target) {\n        this.emit('done', evt.target.result as ArrayBuffer);\n      }\n\n      this.doNextTask();\n    };\n\n    this.fileReader.onerror = evt => {\n      logger.error(`EncodingQueue error:`, evt);\n      this._processing = false;\n      this.destroy();\n      this.emit('error', evt);\n    };\n  }\n\n  get queue(): Blob[] {\n    return this._queue;\n  }\n\n  get size(): number {\n    return this.queue.length;\n  }\n\n  get processing(): boolean {\n    return this._processing;\n  }\n\n  enque(blob: Blob): void {\n    this.queue.push(blob);\n\n    if (this.processing) return;\n\n    this.doNextTask();\n  }\n\n  destroy(): void {\n    this.fileReader.abort();\n    this._queue = [];\n  }\n\n  private doNextTask(): void {\n    if (this.size === 0) return;\n    if (this.processing) return;\n\n    this._processing = true;\n\n    this.fileReader.readAsArrayBuffer(this.queue.shift());\n  }\n}\n", "import { Utils } from './utils';\nimport logger from './logger';\nimport { Negotiator } from './negotiator';\nimport { ConnectionType, ConnectionEventType, SerializationType, ServerMessageType } from './enums';\nimport type { Peer } from './peer';\nimport { BaseConnection } from './baseconnection';\nimport type { ServerMessage } from './servermessage';\nimport { EncodingQueue } from './encodingQueue';\nimport type { DataConnection as IDataConnection } from '../index';\n\n/**\n * Wraps a DataChannel between two Peers.\n */\nexport class DataConnection extends BaseConnection implements IDataConnection {\n  private static readonly ID_PREFIX = 'dc_';\n  private static readonly MAX_BUFFERED_AMOUNT = 8 * 1024 * 1024;\n\n  private _negotiator: Negotiator;\n  readonly label: string;\n  readonly serialization: SerializationType;\n  readonly reliable: boolean;\n  stringify: (data: any) => string = JSON.stringify;\n  parse: (data: string) => any = JSON.parse;\n\n  get type() {\n    return ConnectionType.Data;\n  }\n\n  private _buffer: any[] = [];\n  private _bufferSize = 0;\n  private _buffering = false;\n  private _chunkedData: {\n    [id: number]: {\n      data: Blob[];\n      count: number;\n      total: number;\n    };\n  } = {};\n\n  private _dc: RTCDataChannel;\n  private _encodingQueue = new EncodingQueue();\n\n  get dataChannel(): RTCDataChannel {\n    return this._dc;\n  }\n\n  get bufferSize(): number {\n    return this._bufferSize;\n  }\n\n  constructor(peerId: string, provider: Peer, options: any) {\n    super(peerId, provider, options);\n\n    this.connectionId = this.options.connectionId || DataConnection.ID_PREFIX + Utils.randomToken();\n\n    this.label = this.options.label || this.connectionId;\n    this.serialization = this.options.serialization || SerializationType.Binary;\n    this.reliable = !!this.options.reliable;\n\n    this._encodingQueue.on('done', (ab: ArrayBuffer) => {\n      this._bufferedSend(ab);\n    });\n\n    this._encodingQueue.on('error', () => {\n      logger.error(`DC#${this.connectionId}: Error occured in encoding from blob to arraybuffer, close DC`);\n      this.close();\n    });\n\n    this._negotiator = new Negotiator(this);\n\n    this._negotiator.startConnection(\n      this.options._payload || {\n        originator: true,\n      }\n    );\n  }\n\n  /** Called by the Negotiator when the DataChannel is ready. */\n  initialize(dc: RTCDataChannel): void {\n    this._dc = dc;\n    this._configureDataChannel();\n  }\n\n  private _configureDataChannel(): void {\n    if (!this.provider.features.binaryBlob || this.provider.features.reliable) {\n      this.dataChannel.binaryType = 'arraybuffer';\n    }\n\n    this.dataChannel.onopen = () => {\n      logger.log(`DC#${this.connectionId} dc connection success`);\n      this._open = true;\n      this.emit(ConnectionEventType.Open);\n    };\n\n    this.dataChannel.onmessage = e => {\n      logger.log(`DC#${this.connectionId} dc onmessage:`, e.data);\n      this._handleDataMessage(e);\n    };\n\n    this.dataChannel.onclose = () => {\n      logger.log(`DC#${this.connectionId} dc closed for:`, this.peer);\n      this.close();\n    };\n  }\n\n  // Handles a DataChannel message.\n  private _handleDataMessage({ data }: { data: Blob | ArrayBuffer | string }): void {\n    const datatype = data.constructor;\n\n    const isBinarySerialization =\n      this.serialization === SerializationType.Binary || this.serialization === SerializationType.BinaryUTF8;\n\n    let deserializedData: any = data;\n\n    if (isBinarySerialization) {\n      if (datatype === Blob) {\n        // Datatype should never be blob\n        Utils.blobToArrayBuffer(data as Blob, ab => {\n          const unpackedData = Utils.unpack(ab);\n          this.emit(ConnectionEventType.Data, unpackedData);\n        });\n        return;\n      } else if (datatype === ArrayBuffer) {\n        deserializedData = Utils.unpack(data as ArrayBuffer);\n      } else if (datatype === String) {\n        // String fallback for binary data for browsers that don't support binary yet\n        const ab = Utils.binaryStringToArrayBuffer(data as string);\n        deserializedData = Utils.unpack(ab);\n      }\n    } else if (this.serialization === SerializationType.JSON) {\n      deserializedData = this.parse(data as string);\n    }\n\n    // Check if we've chunked--if so, piece things back together.\n    // We're guaranteed that this isn't 0.\n    if (deserializedData.__peerData) {\n      this._handleChunk(deserializedData);\n      return;\n    }\n\n    super.emit(ConnectionEventType.Data, deserializedData);\n  }\n\n  private _handleChunk(data: { __peerData: number; n: number; total: number; data: Blob }): void {\n    const id = data.__peerData;\n    const chunkInfo = this._chunkedData[id] || {\n      data: [],\n      count: 0,\n      total: data.total,\n    };\n\n    chunkInfo.data[data.n] = data.data;\n    chunkInfo.count++;\n    this._chunkedData[id] = chunkInfo;\n\n    if (chunkInfo.total === chunkInfo.count) {\n      // Clean up before making the recursive call to `_handleDataMessage`.\n      delete this._chunkedData[id];\n\n      // We've received all the chunks--time to construct the complete data.\n      const data = new Blob(chunkInfo.data);\n      this._handleDataMessage({ data });\n    }\n  }\n\n  /**\n   * Exposed functionality for users.\n   */\n\n  /** Allows user to close connection. */\n  close(): void {\n    this._buffer = [];\n    this._bufferSize = 0;\n    this._chunkedData = {};\n\n    if (this._negotiator) {\n      this._negotiator.cleanup();\n      this._negotiator = null;\n    }\n\n    if (this.provider) {\n      this.provider._removeConnection(this);\n\n      this.provider = null;\n    }\n\n    if (this.dataChannel) {\n      this.dataChannel.onopen = null;\n      this.dataChannel.onmessage = null;\n      this.dataChannel.onclose = null;\n      this._dc = null;\n    }\n\n    if (this._encodingQueue) {\n      this._encodingQueue.destroy();\n      this._encodingQueue.removeAllListeners();\n      this._encodingQueue = null;\n    }\n\n    if (!this.open) {\n      return;\n    }\n\n    this._open = false;\n\n    super.emit(ConnectionEventType.Close);\n  }\n\n  /** Allows user to send data. */\n  send(data: any, chunked?: boolean): void {\n    if (!this.open) {\n      super.emit(\n        ConnectionEventType.Error,\n        new Error('Connection is not open. You should listen for the `open` event before sending messages.')\n      );\n      return;\n    }\n\n    if (this.serialization === SerializationType.JSON) {\n      this._bufferedSend(this.stringify(data));\n    } else if (this.serialization === SerializationType.Binary || this.serialization === SerializationType.BinaryUTF8) {\n      const blob = Utils.pack(data);\n\n      if (!chunked && blob.size > Utils.chunkedMTU) {\n        this._sendChunks(blob);\n        return;\n      }\n\n      if (!this.provider.features.binaryBlob) {\n        // We only do this if we really need to (e.g. blobs are not supported),\n        // because this conversion is costly.\n        this._encodingQueue.enque(blob);\n      } else {\n        this._bufferedSend(blob);\n      }\n    } else {\n      this._bufferedSend(data);\n    }\n  }\n\n  private _bufferedSend(msg: any): void {\n    if (this._buffering || !this._trySend(msg)) {\n      this._buffer.push(msg);\n      this._bufferSize = this._buffer.length;\n    }\n  }\n\n  // Returns true if the send succeeds.\n  private _trySend(msg: any): boolean {\n    if (!this.open) {\n      return false;\n    }\n\n    if (this.dataChannel.bufferedAmount > DataConnection.MAX_BUFFERED_AMOUNT) {\n      this._buffering = true;\n      setTimeout(() => {\n        this._buffering = false;\n        this._tryBuffer();\n      }, 50);\n\n      return false;\n    }\n\n    try {\n      this.dataChannel.send(msg);\n    } catch (e) {\n      logger.error(`DC#:${this.connectionId} Error when sending:`, e);\n      this._buffering = true;\n\n      this.close();\n\n      return false;\n    }\n\n    return true;\n  }\n\n  // Try to send the first message in the buffer.\n  private _tryBuffer(): void {\n    if (!this.open) {\n      return;\n    }\n\n    if (this._buffer.length === 0) {\n      return;\n    }\n\n    const msg = this._buffer[0];\n\n    if (this._trySend(msg)) {\n      this._buffer.shift();\n      this._bufferSize = this._buffer.length;\n      this._tryBuffer();\n    }\n  }\n\n  private _sendChunks(blob: Blob): void {\n    const blobs = Utils.chunk(blob);\n    logger.log(`DC#${this.connectionId} Try to send ${blobs.length} chunks...`);\n\n    for (let blob of blobs) {\n      this.send(blob, true);\n    }\n  }\n\n  handleMessage(message: ServerMessage): void {\n    const payload = message.payload;\n\n    switch (message.type) {\n      case ServerMessageType.Answer:\n        this._negotiator.handleSDP(message.type, payload.sdp);\n        break;\n      case ServerMessageType.Candidate:\n        this._negotiator.handleCandidate(payload.candidate);\n        break;\n      default:\n        logger.warn('Unrecognized message type:', message.type, 'from peer:', this.peer);\n        break;\n    }\n  }\n}\n", "import { Utils } from './utils';\nimport logger from './logger';\nimport { PeerJSOption } from '..';\n\nexport class API {\n  private readonly fetch: typeof fetch;\n\n  constructor(private readonly _options: PeerJSOption) {\n    this.fetch = _options.polyfills?.fetch ?? window.fetch;\n  }\n\n  private _buildUrl(method: string): string {\n    const protocol = this._options.secure ? 'https://' : 'http://';\n    let url =\n      protocol + this._options.host + ':' + this._options.port + this._options.path + this._options.key + '/' + method;\n    const queryString = '?ts=' + new Date().getTime() + '' + Math.random();\n    url += queryString;\n\n    return url;\n  }\n\n  /** Get a unique ID from the server via XHR and initialize with it. */\n  async retrieveId(): Promise<string> {\n    const url = this._buildUrl('id');\n\n    try {\n      const response = await this.fetch(url);\n\n      if (response.status !== 200) {\n        throw new Error(`Error. Status:${response.status}`);\n      }\n\n      return response.text();\n    } catch (error) {\n      logger.error('Error retrieving ID', error);\n\n      let pathError = '';\n\n      if (this._options.path === '/' && this._options.host !== Utils.CLOUD_HOST) {\n        pathError =\n          ' If you passed in a `path` to your self-hosted PeerServer, ' +\n          \"you'll also need to pass in that same path when creating a new \" +\n          'Peer.';\n      }\n\n      throw new Error('Could not get an ID from the server.' + pathError);\n    }\n  }\n\n  /** @deprecated */\n  async listAllPeers(): Promise<any[]> {\n    const url = this._buildUrl('peers');\n\n    try {\n      const response = await this.fetch(url);\n\n      if (response.status !== 200) {\n        if (response.status === 401) {\n          let helpfulError = '';\n\n          if (this._options.host === Utils.CLOUD_HOST) {\n            helpfulError =\n              \"It looks like you're using the cloud server. You can email \" +\n              'team@peerjs.com to enable peer listing for your API key.';\n          } else {\n            helpfulError =\n              'You need to enable `allow_discovery` on your self-hosted ' + 'PeerServer to use this feature.';\n          }\n\n          throw new Error(\"It doesn't look like you have permission to list peers IDs. \" + helpfulError);\n        }\n\n        throw new Error(`Error. Status:${response.status}`);\n      }\n\n      return response.json();\n    } catch (error) {\n      logger.error('Error retrieving list peers', error);\n\n      throw new Error('Could not get list peers from the server.' + error);\n    }\n  }\n}\n", "export const Supports = {\n  isUnifiedPlanSupported(webRtc: any): boolean {\n    if (!webRtc && typeof window !== 'undefined') {\n      webRtc = window;\n    }\n\n    if (\n      typeof webRtc.RTCRtpTransceiver === 'undefined' ||\n      !('currentDirection' in webRtc.RTCRtpTransceiver.prototype)\n    ) {\n      return false;\n    }\n\n    let tempPc: RTCPeerConnection;\n    let supported = false;\n\n    try {\n      tempPc = new webRtc.RTCPeerConnection();\n      tempPc.addTransceiver('audio');\n      supported = true;\n    } catch (e) {\n    } finally {\n      if (tempPc) {\n        tempPc.close();\n      }\n    }\n\n    return supported;\n  },\n} as const;\n"],
  "mappings": "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",
  "names": []
}
